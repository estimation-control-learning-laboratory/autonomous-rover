#include <Arduino_GigaDisplay_GFX.h> // library for the display shield

GigaDisplay_GFX display; // Create the display object

volatile long encoder_pulse = 0;
unsigned long prevMillis = 0;
const long interval = 1000;  // time interval
const int Num_motors = 4;
float RPM[Num_motors];
float distance[Num_motors] ;
long Last_Measured_Pulses[Num_motors] ;
long currentPulse[Num_motors];;

// Hardware Constants
const int ENCODER_PPR = 12;  // Encoder pulses per 360 degrees
const int Shaft_Gear_Ratio = 120;
const int wheel_Radius = 48;  // mm

// Encoder Channel Pins
// const int encoderchannelA[Num_motors] = { 2, 4, 6, 8 }; // Motor A pins
// const int encoderchannelB[Num_motors] = { 3, 5, 7, 9 }; // Motor B pins
const int encoderchannelA[Num_motors] = {22, 27, 3, 4};  //encoder pin A, must be interrupt capable
const int encoderchannelB[Num_motors] = {23, 26, 2, 5};  //encoder pin B, must be interrupt capablea

// Store the number of pulses per time interval
volatile long encoder_pulses[Num_motors];

// These Funtions Record the Encoder pulses as we as the direction based on channel A&B
void readEncoderA(int encoderIndex) {
  // CASE1: Pin A
  // If A = HIGH check B
  if (digitalRead(encoderchannelA[encoderIndex]) == HIGH) {
    if (digitalRead(encoderchannelB[encoderIndex]) == LOW) {
      encoder_pulses[encoderIndex]++;
    } else {
      encoder_pulses[encoderIndex]--;
    }
  }
  // If A = LOW check B
  else {
    if (digitalRead(encoderchannelB[encoderIndex]) == HIGH) {
      encoder_pulses[encoderIndex]++;
    } else {
      encoder_pulses[encoderIndex]--;
    }
  }
}

void readEncoderB(int encoderIndex) {
  // CASE 2: Pin B
  if (digitalRead(encoderchannelB[encoderIndex]) == HIGH) {
    if (digitalRead(encoderchannelA[encoderIndex]) == HIGH) {
      encoder_pulses[encoderIndex]++;
    } else {
      encoder_pulses[encoderIndex]--;
    }
  } else {
    if (digitalRead(encoderchannelA[encoderIndex]) == LOW) {
      encoder_pulses[encoderIndex]++;
    } else {
      encoder_pulses[encoderIndex]--;
    }
  }
}
void setup() {
  Serial.begin(115200);
  display.begin();
  display.setRotation(1); // Set orientation (0, 1, 2, or 3)

  for (int i = 0; i < Num_motors; i++) {
    pinMode(encoderchannelA[i], INPUT_PULLUP);
    pinMode(encoderchannelB[i], INPUT_PULLUP);
    switch (i) {
      case 0:
        attachInterrupt(digitalPinToInterrupt(encoderchannelA[i]), callInterruptA0, RISING);  // Funtion that checks for pulses
        attachInterrupt(digitalPinToInterrupt(encoderchannelB[i]), callInterruptB0, RISING);  // Funtion that checks for pulses
        break;
      case 1:
        attachInterrupt(digitalPinToInterrupt(encoderchannelA[i]), callInterruptA1, RISING);  // Funtion that checks for pulses
        attachInterrupt(digitalPinToInterrupt(encoderchannelB[i]), callInterruptB1, RISING);  // Funtion that checks for pulses
        break;
      case 2:
        attachInterrupt(digitalPinToInterrupt(encoderchannelA[i]), callInterruptA2, RISING);  // Funtion that checks for pulses
        attachInterrupt(digitalPinToInterrupt(encoderchannelB[i]), callInterruptB2, RISING);  // Funtion that checks for pulses
        break;

      case 3:
        attachInterrupt(digitalPinToInterrupt(encoderchannelA[i]), callInterruptA3, RISING);  // Funtion that checks for pulses
        attachInterrupt(digitalPinToInterrupt(encoderchannelB[i]), callInterruptB3, RISING);  // Funtion that checks for pulses
        break;
    }
  }
}

void loop() {
  if ((millis() - prevMillis) >= interval) {
    prevMillis = millis();
    calculations();
    displayShieldData();
  }
}

void calculations() {

  long currentPulses[Num_motors];

  noInterrupts();
  for (int i = 0; i < Num_motors; i++) {
    currentPulses[i] = encoder_pulses[i];
  }
  interrupts();
  for (int i = 0; i < Num_motors; i++) {
    long interval_pulses = currentPulses[i] - Last_Measured_Pulses[i];  // calculate pulses over the interval
    float revolutions = (float)interval_pulses / (ENCODER_PPR * Shaft_Gear_Ratio);
    float rpm_float = (revolutions / interval) * 60000.0; // (rev/ms) * (60000 ms/min)
    RPM[i] = rpm_float;

    // Calculate total distance traveled in meters
    float totalRevolutions = (float)currentPulses[i] / (ENCODER_PPR * Shaft_Gear_Ratio);
    float distance_mm = totalRevolutions * wheel_Radius*2*PI;
    distance[i] = distance_mm / 1000.0; // Convert to meters
    Last_Measured_Pulses[i] = currentPulses[i];             // update Last_Measured_Pulses with cuurrentPulse
  }
}

void displayShieldData() {
  // Clear the screen with a black background.
  // Using hex codes (0x0000 for black, 0xFFFF for white) is more robust than color names.
  display.fillScreen(0x0000);

  // --- Print Header ---
  display.setTextColor(0xFFFF);
  display.setTextSize(3);
  display.setCursor(10, 10); // Set X, Y position for text
  display.println("Motor Data");
  display.drawLine(10, 45, 470, 45, 0xFFFF); // Draw a line under the header

  // --- Print Data Table ---
  display.setTextSize(2);
  // Header Row
  display.setCursor(10, 60);
  display.print("Motor");
  display.setCursor(120, 60);
  display.print("RPM");
  display.setCursor(240, 60);
  display.print("Distance (m)");

  // Data Rows
  for (int i = 0; i < Num_motors; i++) {
    int y_pos = 90 + (i * 30); // Calculate Y position for each motor row

    // Motor Number
    display.setCursor(10, y_pos);
    display.print(i);

    // RPM
    display.setCursor(120, y_pos);
    display.print(RPM[i], 2); // Print float with 2 decimal places

    // Distance
    display.setCursor(240, y_pos);
    display.print(distance[i], 3); // Print float with 3 decimal places
  }
}

// Functions to call the main Global Interruptor Functions
void callInterruptA0() {
  readEncoderA(0);
}
void callInterruptB0() {
  readEncoderB(0);
}

void callInterruptA1() {
  readEncoderA(1);
}
void callInterruptB1() {
  readEncoderB(1);
}

void callInterruptA2() {
  readEncoderA(2);
}
void callInterruptB2() {
  readEncoderB(2);
}

void callInterruptA3() {
  readEncoderA(3);
}
void callInterruptB3() {
  readEncoderB(3);
}
